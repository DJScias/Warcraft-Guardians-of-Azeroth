namespace = WCRLM
narrative_event = {
	id = WCRLM.100
	title = EVTTITLE_WCRLM_100
	desc = EVTDESC_WCRLM_100
	picture = GFX_evt_gilneas
	border = GFX_event_narrative_frame_diplomacy

	is_triggered_only = yes
	
	major = yes
	major_trigger = {
		ai = no
	}
	show_root = yes

	option = {
		name = {
			trigger = { character = ROOT }
			text = EVTOPTA_WCRLM_100_case_01
		}
		name = {
			trigger = { NOT = { character = ROOT } opinion = { who = ROOT value = -25 } }
			text = EVTOPTA_WCRLM_100_case_02
		}
		name = {
			trigger = { NOT = { character = ROOT } NOT = { opinion = { who = FROM value = -25 } } }
			text = EVTOPTA_WCRLM_100_case_03
		}
	}
}

# Culling/Genocide/Brings Death
province_event = {
	id = WCRLM.200

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			has_province_modifier = ongoing_genocide
			has_province_modifier = ongoing_culling
			has_province_modifier = spreading_of_death
		}
	}

	immediate = {
		save_event_target_as = target_populated_province
		holder_scope = { character_event = { id = WCRLM.201 } }
	}
}

character_event = {
	id = WCRLM.201
	desc = {
		trigger = { event_target:target_populated_province = { has_province_modifier = ongoing_culling } }
		text = EVTDESC_WCRLM_201_culling
	}
	desc = EVTDESC_WCRLM_201_genocide
	picture = GFX_evt_burning_house

	is_triggered_only = yes

	immediate = {
		save_event_target_as = target_province_holder	# Used in convert_to_target_undead_province_effect
	}

	option = {
		name = EXCELLENT
		event_target:target_populated_province = {
			show_scope_change = no

			if = {
				limit = { NOT = { has_province_modifier = spreading_of_death } }
				culture = ROOT
				religion = ROOT
				add_max_depopulation_effect = yes
			}
			if = {
				limit = {
					has_province_modifier = ongoing_culling
					has_province_modifier = undead_province
				}
				remove_province_modifier = undead_province
			}
			if = {
				limit = {
					has_province_modifier = spreading_of_death
					NOT = { has_province_modifier = undead_province }
				}
				convert_to_target_undead_province_effect = yes
			}
			if = {
				limit = { has_province_modifier = ongoing_genocide }
				remove_province_modifier = ongoing_genocide
			}
			if = {
				limit = { has_province_modifier = ongoing_culling }
				remove_province_modifier = ongoing_culling
			}
			if = {
				limit = { has_province_modifier = spreading_of_death }
				remove_province_modifier = spreading_of_death
			}

			# Clears many vanilla modifiers that give local_revolt_risk
			if = { limit = { has_province_modifier = nomad_agitation } remove_province_modifier = nomad_agitation }

			if = { limit = { has_province_modifier = diplomacy_advice } remove_province_modifier = diplomacy_advice }

			if = { limit = { has_province_modifier = recent_revolt } remove_province_modifier = recent_revolt }
			if = { limit = { has_province_modifier = religious_tension } remove_province_modifier = religious_tension }
			if = { limit = { has_province_modifier = force_converting } remove_province_modifier = force_converting }
			if = { limit = { has_province_modifier = heretic_stronghold } remove_province_modifier = heretic_stronghold }
			if = { limit = { has_province_modifier = high_taxes } remove_province_modifier = high_taxes }
			if = { limit = { has_province_modifier = incompetent_rule } remove_province_modifier = incompetent_rule }

			if = { limit = { has_province_modifier = appeased_religious } remove_province_modifier = appeased_religious }

			if = { limit = { has_province_modifier = neglected_development } remove_province_modifier = neglected_development }
			if = { limit = { has_province_modifier = peasants_protected } remove_province_modifier = peasants_protected }

			if = { limit = { has_province_modifier = pyramid } remove_province_modifier = pyramid }

			if = { limit = { has_province_modifier = construction_accident } remove_province_modifier = construction_accident }

			if = { limit = { has_province_modifier = peasants_scorned } remove_province_modifier = peasants_scorned }
			if = { limit = { has_province_modifier = peasant_unrest } remove_province_modifier = peasant_unrest }
			if = { limit = { has_province_modifier = religious_unrest } remove_province_modifier = religious_unrest }
			if = { limit = { has_province_modifier = cultural_unrest } remove_province_modifier = cultural_unrest }

			if = { limit = { has_province_modifier = peasants_upset } remove_province_modifier = peasants_upset }
			if = { limit = { has_province_modifier = public_execution } remove_province_modifier = public_execution }
			if = { limit = { has_province_modifier = restricted_peasant_access } remove_province_modifier = restricted_peasant_access }

			if = { limit = { has_province_modifier = steward_revoltrisk } remove_province_modifier = steward_revoltrisk }

			if = { limit = { has_province_modifier = arbitrary_steward } remove_province_modifier = arbitrary_steward }
			if = { limit = { has_province_modifier = just_steward } remove_province_modifier = just_steward }

			if = { limit = { has_province_modifier = prima_noctae } remove_province_modifier = prima_noctae }
			if = { limit = { has_province_modifier = peasants_forbidden_sale } remove_province_modifier = peasants_forbidden_sale }
			if = { limit = { has_province_modifier = clergy_extra_tithe } remove_province_modifier = clergy_extra_tithe }

			if = { limit = { has_province_modifier = extra_tax } remove_province_modifier = extra_tax }

			if = { limit = { has_province_modifier = active_inquisition } remove_province_modifier = active_inquisition }
			if = { limit = { has_province_modifier = theological_dialogue } remove_province_modifier = theological_dialogue }

			if = { limit = { has_province_modifier = rampaging_nomads } remove_province_modifier = rampaging_nomads }

			if = { limit = { has_province_modifier = recent_county_uprising } remove_province_modifier = recent_county_uprising }

			if = { limit = { has_province_modifier = peasants_subdued } remove_province_modifier = peasants_subdued }

			if = { limit = { has_province_modifier = commoners_abandoned } remove_province_modifier = commoners_abandoned }

			if = { limit = { has_province_modifier = peasant_crisis } remove_province_modifier = peasant_crisis }
			if = { limit = { has_province_modifier = peasant_pleased_witch_hunt } remove_province_modifier = peasant_pleased_witch_hunt }

			if = { limit = { has_province_modifier = no_more_cats } remove_province_modifier = no_more_cats }

			if = { limit = { has_province_modifier = epidemic_blame_1 } remove_province_modifier = epidemic_blame_1 }
			if = { limit = { has_province_modifier = epidemic_blame_2 } remove_province_modifier = epidemic_blame_2 }

			if = { limit = { has_province_modifier = ordered_our_prophet_executed } remove_province_modifier = ordered_our_prophet_executed }

			if = { limit = { has_province_modifier = damaged_hospital } remove_province_modifier = damaged_hospital }

			if = { limit = { has_province_modifier = rumors_of_witchcraft } remove_province_modifier = rumors_of_witchcraft }

			if = { limit = { has_province_modifier = sabotaged_unrest } remove_province_modifier = sabotaged_unrest }

			if = { limit = { has_province_modifier = proud_hunters_spirit } remove_province_modifier = proud_hunters_spirit }

			if = { limit = { has_province_modifier = coronation_improved_trade } remove_province_modifier = coronation_improved_trade }
			if = { limit = { has_province_modifier = coronation_peasants_happy } remove_province_modifier = coronation_peasants_happy }

			if = { limit = { has_province_modifier = fertility_festival_province } remove_province_modifier = fertility_festival_province }

			if = { limit = { has_province_modifier = zealots_running_amok } remove_province_modifier = zealots_running_amok }

			if = { limit = { has_province_modifier = tomb_of_a_saint } remove_province_modifier = tomb_of_a_saint }

			if = { limit = { has_province_modifier = monk_society_help } remove_province_modifier = monk_society_help }

			if = { limit = { has_province_modifier = capital_thrall_workers_01 } remove_province_modifier = capital_thrall_workers_01 }
			if = { limit = { has_province_modifier = capital_thrall_workers_02 } remove_province_modifier = capital_thrall_workers_02 }
			if = { limit = { has_province_modifier = capital_thrall_workers_03 } remove_province_modifier = capital_thrall_workers_03 }
			if = { limit = { has_province_modifier = capital_thrall_workers_04 } remove_province_modifier = capital_thrall_workers_04 }
			if = { limit = { has_province_modifier = capital_thrall_workers_05 } remove_province_modifier = capital_thrall_workers_05 }
			if = { limit = { has_province_modifier = capital_thrall_workers_06 } remove_province_modifier = capital_thrall_workers_06 }

			if = { limit = { has_province_modifier = stewardship_haruspicy_sacrifice } remove_province_modifier = stewardship_haruspicy_sacrifice }
			if = { limit = { has_province_modifier = negative_haruspicy_sacrifice } remove_province_modifier = negative_haruspicy_sacrifice }

			if = { limit = { has_province_modifier = tribal_festival_modifier } remove_province_modifier = tribal_festival_modifier }
			if = { limit = { has_province_modifier = mass_baptism_capital_traders } remove_province_modifier = mass_baptism_capital_traders }
			if = { limit = { has_province_modifier = mass_baptism_capital_missionaries } remove_province_modifier = mass_baptism_capital_missionaries }

			if = { limit = { has_province_modifier = kid_crusade_pledged_troops } remove_province_modifier = kid_crusade_pledged_troops }

			if = { limit = { has_province_modifier = shepherds_chaos } remove_province_modifier = shepherds_chaos }

			if = { limit = { has_province_modifier = local_relief_efforts_food } remove_province_modifier = local_relief_efforts_food }

			if = { limit = { has_province_modifier = soldiers_fixed_gold_inflation } remove_province_modifier = soldiers_fixed_gold_inflation }
		}
	}
}

### Clears genocide modifiers if province has been conquered ###
# on_siege_over_winner
character_event = {
	id = WCRLM.1200
	
	is_triggered_only = yes
	hide_window = yes
	
	# only_playable = yes
	
	trigger = {
		FROM = {
			tier = BARON
			is_capital = yes

			location = {
				OR = {
					has_province_modifier = ongoing_genocide
					has_province_modifier = ongoing_culling
					has_province_modifier = spreading_of_death
				}
			}
			holder_scope = { top_liege = { any_current_enemy = { character = ROOT } } }
		}
	}
	
	immediate = {
		FROM = { location = { save_event_target_as = target_province } }
		
		narrative_event = { id = WCRLM.202 }
	}
}
# on_new_holder, on_new_holder_inheritance, on_new_holder_usurpation
character_event = {
	id = WCRLM.1201
	
	is_triggered_only = yes
	hide_window = yes
	
	only_playable = yes
	
	trigger = {
		FROM = {
			tier = COUNT

			location = {
				OR = {
					has_province_modifier = ongoing_genocide
					has_province_modifier = ongoing_culling
					has_province_modifier = spreading_of_death
				}
			}
		}
	}
	
	immediate = {
		FROM = { location = { save_event_target_as = target_province } }
		
		narrative_event = { id = WCRLM.202 }
	}
}
character_event = {
	id = WCRLM.202

	is_triggered_only = yes
	hide_window = yes

	# only_playable = yes

	immediate = {
		log = "WCRLM.202 fired for [Root.GetBestName]"

		event_target:target_province = {
			remove_province_modifier = ongoing_genocide
			remove_province_modifier = ongoing_culling
			remove_province_modifier = spreading_of_death
			clear_delayed_event = { id = WCRLM.200 }
		}
	}
}

# target_old_holder abdicates to target_new_holder
character_event = {
	id = WCRLM.555

	is_triggered_only = yes
	hide_window = yes

	immediate = {
		wealth = event_target:target_old_holder
		event_target:target_old_holder = {
			clear_wealth = yes
			abdicate_to = event_target:target_new_holder
			character_event = { id = WCRLM.560 }	# Loses all claims
			if = {
				limit = {
					is_alive = yes
					is_dying = no
				}
				death = { death_reason = death_missing }
			}
		}
	}
}
# Loses all claims
character_event = {
	id = WCRLM.560

	is_triggered_only = yes
	hide_window = yes

	immediate = {
		any_claim = { remove_claim = ROOT }
	}
}

### Burning Trees ###
# on_siege_won_leader
# Burn World Tree?
# burn_world_tree is another way to fire WCRLM.600 event, check its condtions as well
narrative_event = {
	id = WCRLM.595
	title = EVTTITLE_WCRLM_595
	desc = {
		trigger = { FROM = { has_title_flag = nightmare_tree_title_flag } }
		text = EVTDESC_WCRLM_595_nightmare
		picture = GFX_evt_emerald_nightmare
	}
	desc = {
		trigger = { FROM = { NOT = { has_title_flag = nightmare_tree_title_flag } } }
		text = EVTDESC_WCRLM_595_tree
		picture = GFX_evt_world_tree
	}
	picture = GFX_evt_world_tree
	border = GFX_event_narrative_frame_war

	is_triggered_only = yes

	trigger = {
		# from_potential of burn_world_tree
		trigger_if = {
			limit = { FROM = { NOT = { has_title_flag = nightmare_tree_title_flag } } }
			NOT = { religion_group = druidism_group }
		}
		NOT = { religion = old_gods_worship }

		FROM = {
			# potential of burn_world_tree
			location = { NOT = { has_province_flag = burn_world_tree_ongoing_flag } }

			OR = {
				has_title_flag = world_tree_title_flag
				has_title_flag = nightmare_tree_title_flag
			}
			holding_type = temple
			# has_siege = no
			# is_occupied = no
			
			# AI Preferences
			ROOT = {
				OR = {
					ai = no
					evil_true_religion_trigger = yes
					trait = cruel
					trait = lunatic
					FROM = { has_title_flag = nightmare_tree_title_flag }
				}
			}
			
			# allow of burn_world_tree
			# holder_scope = {
				# trigger_if = {
					# limit = { ROOT = { NOT = { has_title_flag = nightmare_tree_title_flag } } }
					# NOT = { religion_group = druidism_group }
				# }
				# NOT = { religion = old_gods_worship }
			# }

			ROOT = {
				trigger_if = {
					limit = { FROM = { NOT = { has_title_flag = nightmare_tree_title_flag } } }
					NOT = { true_religion_group = druidism_group }
				}
				NOT = { true_religion = old_gods_worship }
			}
			
			holder_scope = { top_liege = { any_current_enemy = { character = ROOT } } }
		}
	}

	immediate = {
		FROM = {
			save_event_target_as = target_title
			location = {
				save_event_target_as = target_province

				set_province_flag = burn_world_tree_ongoing_flag		# Stops from firing burn_world_tree
			}
		}
		save_event_target_as = target_arsonist
	}

	option = {
		name = EVTOPTA_WCRLM_595		# Burn it!

		prestige = 2500

		custom_tooltip = {
			text = burn_world_tree_tooltip
			hidden_tooltip = { narrative_event = { id = WCRLM.600 } }
		}
	}

	option = {
		name = EVTOPTB_WCRLM_595		# Leave it be.
		
		FROM = {
			location = {
				clr_province_flag = burn_world_tree_ongoing_flag		# Unlock burn_world_tree
			}
		}
		
		ai_chance = {
			factor = 0
		}
	}
}
# Burning Tree
narrative_event = {
	id = WCRLM.600
	title = EVTTITLE_WCRLM_600
	desc = {
		trigger = { event_target:target_title = { has_title_flag = nightmare_tree_title_flag } }
		text = EVTDESC_WCRLM_600_nightmare
	}
	desc = {
		trigger = { event_target:target_title = { NOT = { has_title_flag = nightmare_tree_title_flag } } }
		text = EVTDESC_WCRLM_600_tree
	}
	picture = GFX_evt_burning_world_tree
	border = GFX_event_narrative_frame_war

	is_triggered_only = yes

	# major = yes
	
	immediate = {
		if = {
			limit = { character = event_target:target_arsonist }
			any_player = {
				limit = {
					NOT = { character = ROOT }
				}
				narrative_event = { id = WCRLM.600 }
			}
		}
	}

	option = {
		trigger = {
			NOT = { character = event_target:target_arsonist }
			
			evil_true_religion_trigger = yes
		}
		name = FOOLS
	}

	option = {
		trigger = {
			character = event_target:target_arsonist
			
			event_target:target_title = { has_title_flag = nightmare_tree_title_flag }
		}
		name = EVTOPTA_WCRLM_600_nightmare		# The fire will clear this place!
	}
	option = {
		trigger = {
			character = event_target:target_arsonist
			
			event_target:target_title = { NOT = { has_title_flag = nightmare_tree_title_flag } }
		}
		name = EVTOPTA_WCRLM_600_tree			# What a wonderful view!
	}

	option = {
		trigger = {
			NOT = { character = event_target:target_arsonist }

			true_religion_group = druidism_group
			
			event_target:target_title = { has_title_flag = nightmare_tree_title_flag }
		}
		name = EVTOPTB_WCRLM_600_nightmare		# We couldn't help this tree...
	}
	option = {
		trigger = {
			NOT = { character = event_target:target_arsonist }

			true_religion_group = druidism_group
			
			event_target:target_title = { NOT = { has_title_flag = nightmare_tree_title_flag } }
		}
		name = EVTOPTB_WCVOD_410		# How did we let this happen?
	}

	option = {
		trigger = {
			NOT = { character = event_target:target_arsonist }

			evil_true_religion_trigger = no
			NOT = { true_religion_group = druidism_group }
		}
		name = EVTOPTC_WCVOD_410		# It's better to stay away from these places.
	}

	after = {
		tooltip = { burn_world_tree_effect = yes }
		hidden_effect = {
			if = {
				limit = { character = event_target:target_arsonist }
				burn_world_tree_effect = yes
			}
		}
	}
}

# Clear settler flags
character_event = {
	id = WCRLM.700
	
	is_triggered_only = yes
	hide_window = yes
	
	immediate = {
		# Clear flags and other stuff
		clear_settler_flag_effect = yes
	}
}

### Ymiron Awakened ###
character_event = {
	id = WCRLM.799
	
	is_triggered_only = yes
	hide_window = yes
	
	immediate = {
		# Saves ROOT's liege for future use
		if = {
			limit = { independent = no }
			liege = { save_event_target_as = target_liege }
		}
		
		# Creates Ymiron
		create_character = {
			name=Ymiron
			dynasty=70000
			dna="anolmcpmehb"
			culture=vrykul religion=ROOT
			attributes = { martial=6 diplomacy=6 stewardship=4 intrigue=7 learning=7 }
			trait=skilled_tactician
			trait=class_warrior_7
			trait=wroth trait=proud trait=ambitious trait=arbitrary trait=paranoid
			trait=creature_vrykul
			random_traits = yes
			age = 300
		}
		new_character = {
			save_event_target_as = target_ymiron
		}
		event_target:target_ymiron = {
			# Wealth, prestige
			wealth = 300
			prestige = 1000
		
			# Gives bloodline
			create_bloodline = {
				type = ymiron
			}
			
			# Ymiron gets ROOT titles, k_howling_fjord or claim on k_howling_fjord
			event_target:target_ymiron = { ROOT = { this_abdicate_transfer_wealth_to_play_prev_effect = yes } }
			if = {
				limit = { k_howling_fjord = { is_title_active = THIS } }
				if = {
					limit = { k_howling_fjord = { has_holder = no } }
					primary_title = {
						k_howling_fjord = {
							grant_title_no_opinion = event_target:target_ymiron
							copy_title_laws = PREV
						}
					}
				}
				else = {
					add_pressed_claim = k_howling_fjord
				}
			}
			if = {
				limit = { event_target:target_liege = { character = yes } }
				set_defacto_liege = event_target:target_liege
			}
			
			# Ymiron gets army and commanders
			spawn_fantastic_commander_effect = yes
			spawn_great_commander_effect = yes
			spawn_great_commander_effect = yes
			# Well-balanced troops + fleet
			spawn_colonial_troops_effect = yes
			
			# Angerboda becomes your spouse
			set_character_flag = recieved_royal_marriage_aid_duty	# Not first marriage
			c_100001 = {
				if = {
					limit = {
						can_has_sexual_relation_with_prev = yes
						
						OR = {
							character = ROOT
							AND = {
								is_married = no
								is_betrothed = no
							}
						}
					}
					if = {
						limit = { is_married = yes }
						any_spouse = { remove_spouse = PREV }
					}
					if = {
						limit = { is_betrothed = yes }
						betrothed = { break_betrothal = PREV }
					}
					add_spouse = event_target:target_ymiron
					add_lover = event_target:target_ymiron
				}
			}
		}
		
		# Notification
		any_player = {
			limit = { any_realm_province = { region = world_northrend } }
			repeat_event = { id = WCRLM.800 }
		}
	}
}
narrative_event = {
	id = WCRLM.800
	title = EVTTITLE_WCRLM_800
	desc = EVTDESC_WCRLM_800
	picture = GFX_evt_utgarde
	border = GFX_event_narrative_frame_war
	portrait = event_target:target_ymiron

	is_triggered_only = yes
	
	hide_new = yes
	
	# King returned!
	option = {
		trigger = {
			OR = {
				character = FROM
				character = event_target:target_ymiron
			}
		}
		name = EVTOPTA_WCRLM_800
	}
	# King returned!
	option = {
		trigger = {
			NOT = {
				character = FROM
				character = event_target:target_ymiron
				has_landed_title = k_howling_fjord				# Current king of k_howling_fjord, if he's not target_ymiron, is upset
			}
			culture_group = vrykul_group
			capital_scope = { region = world_northrend_howling_fjord }
		}
		name = EVTOPTA_WCRLM_800
	}
	# Ymiron? Many legends of him have been told...
	option = {
		trigger = {
			NOT = {
				character = FROM
				character = event_target:target_ymiron
				has_landed_title = k_howling_fjord			# Current king of k_howling_fjord, if he's not target_ymiron, is upset
				capital_scope = { region = world_northrend_howling_fjord }
			}
			culture_group = vrykul_group
		}
		name = EVTOPTB_WCRLM_800
	}
	# Who cares?
	option = {
		trigger = {
			NOT = {
				character = FROM
				character = event_target:target_ymiron
			}
		}
		name = WHO_CARES
	}
}